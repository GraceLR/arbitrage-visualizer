/**
 * This is a very simple strongly typed event emitter class, see README.md
 * for more details.
 */
export declare class Event<T = undefined> {
    /** All the current listeners for this event. */
    private listeners;
    /**
     * Attaches a listener to trigger on all emits for this event.
     *
     * @param callback - The callback to invoke on all emits.
     */
    on(callback: (data: T) => void): void;
    /**
     * Attaches a listener to trigger on only the first emit for this event.
     * After that event is emitted this callback will automatically be
     * removed.
     *
     * @param callback - The callback to invoke only the next time this event
     * emits, then that callback is removed from this event.
     */
    once(callback: (emitted: T) => void): void;
    /**
     * Attaches a listener to trigger on only the first emit for this event.
     *
     * Returns a promise that resolves with the data the next time this event
     * is triggered (only once).
     *
     * @returns A promise that resolves with the data the next time this event
     * is triggered (only once).
     */
    once(): Promise<T>;
    /**
     * Removes a callback from the listeners on this event, regardless of once
     * vs on.
     *
     * Returns true if a callback was removed, false otherwise.
     *
     * @param listener - The callback to remove.
     * @returns True if a callback was removed, false otherwise.
     */
    off(listener: ((emitted: T) => void) | Promise<T>): boolean;
    /**
     * Removes ALL callbacks from this event, regardless of once vs on.
     *
     * Returns the number of listeners removed.
     *
     * @returns The number of listeners removed.
     */
    offAll(): number;
    /**
     * Emits a value to all the listeners, triggering their callbacks.
     * Returns true if the event had listeners emitted to,
     * false otherwise.
     *
     * @param emitting - If the Event has a type, this is the data of that type
     * to emit to all listeners. If no type (never) this argument should
     * be omitted.
     * @returns True if the event had listeners emitted to, false otherwise.
     */
    readonly emit: [T] extends [undefined] ? () => boolean : (emitting: T) => boolean;
}
