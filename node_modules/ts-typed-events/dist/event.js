"use strict";
/**
 * This is a very simple strongly typed event emitter class, see README.md
 * for more details.
 */
exports.__esModule = true;
exports.Event = void 0;
var Event = /** @class */ (function () {
    function Event() {
        var _this = this;
        /** All the current listeners for this event. */
        this.listeners = [];
        /**
         * Emits a value to all the listeners, triggering their callbacks.
         * Returns true if the event had listeners emitted to,
         * false otherwise.
         *
         * @param emitting - If the Event has a type, this is the data of that type
         * to emit to all listeners. If no type (never) this argument should
         * be omitted.
         * @returns True if the event had listeners emitted to, false otherwise.
         */
        this.emit = (function (emitting) {
            var hadListeners = _this.listeners.length > 0;
            for (var _i = 0, _a = _this.listeners; _i < _a.length; _i++) {
                var listener = _a[_i];
                listener.callback(emitting);
            }
            // remove all listeners that only wanted to listen once
            _this.listeners = _this.listeners.filter(function (l) { return !l.once; });
            return hadListeners;
        });
    }
    /**
     * Attaches a listener to trigger on all emits for this event.
     *
     * @param callback - The callback to invoke on all emits.
     */
    Event.prototype.on = function (callback) {
        this.listeners.push({
            once: false,
            callback: callback
        });
    };
    /**
     * Attaches a listener to trigger on only the first emit for this event.
     *
     * This version either takes a callback or returns a promise.
     *
     * @param callback - Optional callback, if specified invokes the callback
     * only once when the event is triggered, then removes it.
     * Otherwise returns a promise that resolves with the value the next time
     * this event is triggered.
     * @returns Nothing if a callback is passed, otherwise a Promise that
     * should resolve once this Event emits.
     */
    Event.prototype.once = function (callback) {
        var _this = this;
        if (!callback) {
            // then they want us to return the promise
            var promise = new Promise(function (resolve) {
                // this will invoke the version that has a callback,
                // so resolve can be used as the callback
                _this.once(resolve);
            });
            // attach the promise we just made to the listener (it was pushed
            // on the end via this.once() above)
            this.listeners[this.listeners.length - 1].promise = promise;
            return promise;
        }
        // else we were sent a normal callback, so attach it
        this.listeners.push({
            once: true,
            callback: callback
        });
    };
    /**
     * Removes a callback from the listeners on this event, regardless of once
     * vs on.
     *
     * Returns true if a callback was removed, false otherwise.
     *
     * @param listener - The callback to remove.
     * @returns True if a callback was removed, false otherwise.
     */
    Event.prototype.off = function (listener) {
        var originalLength = this.listeners.length;
        // remove all listeners that have the same callback as this one
        this.listeners = this.listeners.filter(function (l) {
            return (listener !== l.callback &&
                (!l.promise || listener !== l.promise));
        });
        return this.listeners.length !== originalLength;
    };
    /**
     * Removes ALL callbacks from this event, regardless of once vs on.
     *
     * Returns the number of listeners removed.
     *
     * @returns The number of listeners removed.
     */
    Event.prototype.offAll = function () {
        var originalLength = this.listeners.length;
        this.listeners.length = 0; // empty our listener array
        return originalLength;
    };
    return Event;
}());
exports.Event = Event;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBY0g7SUFBQTtRQUFBLGlCQWlJQztRQWhJRyxnREFBZ0Q7UUFDeEMsY0FBUyxHQUF1QixFQUFFLENBQUM7UUF1RzNDOzs7Ozs7Ozs7V0FTRztRQUNhLFNBQUksR0FFYSxDQUFDLFVBQzlCLFFBQVk7WUFFWixJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDL0MsS0FBdUIsVUFBYyxFQUFkLEtBQUEsS0FBSSxDQUFDLFNBQVMsRUFBZCxjQUFjLEVBQWQsSUFBYyxFQUFFO2dCQUFsQyxJQUFNLFFBQVEsU0FBQTtnQkFDZixRQUFRLENBQUMsUUFBUSxDQUFDLFFBQWEsQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsdURBQXVEO1lBQ3ZELEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQVAsQ0FBTyxDQUFDLENBQUM7WUFDdkQsT0FBTyxZQUFZLENBQUM7UUFDeEIsQ0FBQyxDQUFtRSxDQUFDO0lBQ3pFLENBQUM7SUE3SEc7Ozs7T0FJRztJQUNJLGtCQUFFLEdBQVQsVUFBVSxRQUEyQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNoQixJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsVUFBQTtTQUNYLENBQUMsQ0FBQztJQUNQLENBQUM7SUF1QkQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSSxvQkFBSSxHQUFYLFVBQVksUUFBK0I7UUFBM0MsaUJBbUJDO1FBbEJHLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCwwQ0FBMEM7WUFDMUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUksVUFBQyxPQUFPO2dCQUNuQyxvREFBb0Q7Z0JBQ3BELHlDQUF5QztnQkFDekMsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztZQUNILGlFQUFpRTtZQUNqRSxvQ0FBb0M7WUFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQzVELE9BQU8sT0FBTyxDQUFDO1NBQ2xCO1FBRUQsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2hCLElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxVQUFBO1NBQ1gsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksbUJBQUcsR0FBVixVQUFXLFFBQTZDO1FBQ3BELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzdDLCtEQUErRDtRQUMvRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQztZQUNyQyxPQUFPLENBQ0gsUUFBUSxLQUFLLENBQUMsQ0FBQyxRQUFRO2dCQUN2QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUN6QyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLGNBQWMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksc0JBQU0sR0FBYjtRQUNJLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtRQUN0RCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBMEJMLFlBQUM7QUFBRCxDQUFDLEFBaklELElBaUlDO0FBaklZLHNCQUFLIn0=