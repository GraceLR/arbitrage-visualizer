"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.events = void 0;
/**
 * Creates a handy interface object of event names for combining linked
 * events.
 *
 * Returns a frozen object of events for easy grouping.
 *
 * @deprecated - see https://github.com/JacobFischer/ts-typed-events/issues/8.
 * @param group - An object of events used to group the event by name.
 * @returns A frozen object of events for easy grouping.
 */
exports.events = function groupEvents(group) {
    return Object.freeze(group);
};
/**
 * Combines two events objects into one, while creating a TS interface for
 * type checking.
 *
 * Returns a frozen object that is the two lists combined, with B taking
 * precedent over A for conflicts.
 *
 * @param eventsA - The first object of events to combine with B.
 * @param eventsB - The second object of events to combine with A.
 * @returns A frozen object that is the two lists combined, with B taking
 * precedent over A for conflicts.
 */
exports.events.concat = function eventsConcat(eventsA, eventsB) {
    return Object.freeze(__assign(__assign({}, eventsA), eventsB));
};
/**
 * Removes all event listeners from a group of events.
 *
 * @param events - An object of keys mapping to Event instances to remove all
 * the listeners from.
 */
exports.events.offAll = function eventsOffAll(events) {
    // Use for-in loop to preserve ES3 full backwards compatibility.
    // eslint-disable-next-line @typescript-eslint/no-for-in-array
    for (var key in events) {
        // Because the else condition should never happen
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(events, key)) {
            var event = events[key];
            event.offAll(); // will exist because of above check
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQW9EQTs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLE1BQU0sR0FBbUIsU0FBUyxXQUFXLENBRXhELEtBQVE7SUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxjQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsWUFBWSxDQUduQyxPQUFVLEVBQUUsT0FBVTtJQUNwQixPQUFPLE1BQU0sQ0FBQyxNQUFNLHVCQUNiLE9BQU8sR0FDUCxPQUFPLEVBQ1osQ0FBQztBQUNQLENBQUMsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsY0FBTSxDQUFDLE1BQU0sR0FBRyxTQUFTLFlBQVksQ0FBc0IsTUFBUztJQUNoRSxnRUFBZ0U7SUFDaEUsOERBQThEO0lBQzlELEtBQUssSUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3RCLGlEQUFpRDtRQUNqRCwwQkFBMEI7UUFDMUIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELElBQU0sS0FBSyxHQUFLLE1BQTZDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsb0NBQW9DO1NBQ3ZEO0tBQ0o7QUFDTCxDQUFDLENBQUMifQ==