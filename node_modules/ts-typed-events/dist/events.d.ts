import { Event } from "./event";
/**
 * The basic interface for combined events.
 *
 * @deprecated - see https://github.com/JacobFischer/ts-typed-events/issues/8.
 */
export declare type Events<T extends {}> = {
    [K in keyof T]: T[K] extends Event<infer P> ? T[K] : never;
};
/**
 * A utility function that creates a grouping of events and can manipulate
 * those events.
 */
export interface EventsFunction {
    /**
     * Creates a handy interface object of event names for combining linked
     * events.
     *
     * Returns  a the group object now frozen for easy TS lookups.
     *
     * @param group - An object of events used to group the event by name.
     * @returns A the group object now frozen for easy TS lookups.
     */
    <T extends Events<T>>(group: T): Readonly<T>;
    /**
     * Combines two events objects into one, while creating a TS interface for
     * type checking.
     *
     * Returns a new frozen object that is the two lists combined, with B
     * taking precedent over A for conflicts.
     *
     * @param eventsA - The first object of events to combine with B.
     * @param eventsB - The second object of events to combine with A.
     * @returns A new frozen object that is the two lists combined, with B
     * taking precedent over A for conflicts.
     */
    concat: <T extends Events<T>, S extends Events<S>>(eventsA: T, eventsB: S) => Readonly<T & S>;
    /**
     * Removes all event listeners from all events.
     */
    offAll: <T extends Events<T>>(events: T) => void;
}
/**
 * Creates a handy interface object of event names for combining linked
 * events.
 *
 * Returns a frozen object of events for easy grouping.
 *
 * @deprecated - see https://github.com/JacobFischer/ts-typed-events/issues/8.
 * @param group - An object of events used to group the event by name.
 * @returns A frozen object of events for easy grouping.
 */
export declare const events: EventsFunction;
