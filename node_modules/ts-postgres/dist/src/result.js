"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeResult = exports.ResultIterator = exports.Result = exports.ResultRow = void 0;
class ResultRow {
    constructor(names, data) {
        this.names = names;
        this.data = data;
        this.length = names.length;
    }
    get(name) {
        for (let i = 0; i < this.length; i++) {
            if (this.names[i] === name) {
                return this.data[i];
            }
        }
    }
}
exports.ResultRow = ResultRow;
class Result {
    constructor(names, rows, status) {
        this.names = names;
        this.rows = rows;
        this.status = status;
    }
    [Symbol.iterator]() {
        let i = 0;
        const rows = this.rows;
        const length = rows.length;
        const shift = () => {
            const names = this.names;
            const values = rows[i];
            i++;
            return new ResultRow(names, values);
        };
        return {
            next: () => {
                if (i === length)
                    return { done: true, value: undefined };
                return { done: false, value: shift() };
            }
        };
    }
}
exports.Result = Result;
class ResultIterator extends Promise {
    constructor(container, executor) {
        super((resolve, reject) => {
            executor((resolution) => {
                if (resolution instanceof Error) {
                    reject(resolution);
                }
                else {
                    const names = this.names || [];
                    const rows = this.rows || [];
                    resolve(new Result(names, rows, resolution));
                }
            });
        });
        this.container = container;
        this.subscribers = [];
        this.done = false;
        this.rows = null;
        this.names = null;
    }
    first() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                    const row = _c.value;
                    return row;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    one() {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                    const row = _c.value;
                    return row;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            throw new Error('Query returned an empty result');
        });
    }
    notify(done, status) {
        if (done)
            this.done = true;
        for (const subscriber of this.subscribers)
            subscriber(done, status);
        this.subscribers.length = 0;
    }
    [Symbol.asyncIterator]() {
        let i = 0;
        const container = this.container;
        const shift = () => {
            const names = this.names;
            const values = container[i];
            i++;
            if (names === null) {
                throw new Error("Column name mapping missing.");
            }
            return new ResultRow(names, values);
        };
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        let error = null;
        this.catch((reason) => {
            error = new Error(reason);
        });
        return {
            next: () => __awaiter(this, void 0, void 0, function* () {
                if (error) {
                    throw error;
                }
                if (container.length <= i) {
                    if (this.done) {
                        return { done: true, value: undefined };
                    }
                    if (yield new Promise((resolve, reject) => {
                        this.subscribers.push((done, status) => {
                            if (typeof status !== 'undefined') {
                                reject(status);
                            }
                            else {
                                resolve(done);
                            }
                        });
                    })) {
                        return { done: true, value: undefined };
                    }
                }
                return { value: shift(), done: false };
            })
        };
    }
}
exports.ResultIterator = ResultIterator;
ResultIterator.prototype.constructor = Promise;
function makeResult() {
    let dataHandler = null;
    const nameHandler = (names) => {
        p.names = names;
    };
    const rows = [];
    const p = new ResultIterator(rows, (resolve) => {
        dataHandler = ((row) => {
            if (row === null || typeof row === 'string') {
                p.rows = rows;
                resolve(row);
                p.notify(true);
            }
            else if (Array.isArray(row)) {
                rows.push(row);
                p.notify(false);
            }
            else {
                resolve(row);
                p.notify(true, row);
            }
        });
    });
    return {
        iterator: p,
        dataHandler: dataHandler,
        nameHandler: nameHandler
    };
}
exports.makeResult = makeResult;
//# sourceMappingURL=result.js.map